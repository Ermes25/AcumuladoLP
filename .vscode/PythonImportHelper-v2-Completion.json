[
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "daoConnection",
        "importPath": "dao",
        "description": "dao",
        "isExtraImport": true,
        "detail": "dao",
        "documentation": {}
    },
    {
        "label": "clases",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Connection",
        "kind": 6,
        "importPath": "dao.daoConnection",
        "description": "dao.daoConnection",
        "peekOfCode": "class Connection:\n    def __init__(self, host, user, password, database):\n        self.host = host\n        self.user = user\n        self.password = password\n        self.database = database\n        self.cnx = None\n        self.connect()\n    def connect(self):\n        self.cnx = mysql.connector.connect(user=self.user, password=self.password, host=self.host, database=self.database)",
        "detail": "dao.daoConnection",
        "documentation": {}
    },
    {
        "label": "DaoCity",
        "kind": 6,
        "importPath": "dao.daoConnection",
        "description": "dao.daoConnection",
        "peekOfCode": "class DaoCity:\n    def __init__(self, connection):\n        self.connection = connection\n    def get_all(self):\n        query = 'SELECT * FROM cities'\n        return self.connection.execute_read_query(query, ())\n    def get_by_id(self, id):\n        query = 'SELECT * FROM cities WHERE id = %s'\n        return self.connection.execute_read_query(query, (id,))\n    def insert(self, city):",
        "detail": "dao.daoConnection",
        "documentation": {}
    },
    {
        "label": "DaoJob",
        "kind": 6,
        "importPath": "dao.daoConnection",
        "description": "dao.daoConnection",
        "peekOfCode": "class DaoJob:\n    def __init__(self,connection) :\n        self.connection = connection\n    def get_all(self):\n        query = 'SELECT * FROM jobsj'\n        return self.connection.execute_read_query(query, ())\n    def get_by_id(self,id):\n        query = 'SELECT * FROM jobsj WHERE id = %s'\n        return self.connection.execute_read_query(query, (id,))\n    def insert(self, Job):",
        "detail": "dao.daoConnection",
        "documentation": {}
    },
    {
        "label": "DaoEmploye",
        "kind": 6,
        "importPath": "dao.daoConnection",
        "description": "dao.daoConnection",
        "peekOfCode": "class DaoEmployee :\n    def __init__(self,connection) :\n        self.connection = connection\n    def get_all(self):\n        query = 'SELECT * FROM employees'\n        return self.connection.execute_read_query(query, ())\n    def get_by_id(self,id):\n        query = 'SELECT * FROM employees'\n        return self.connection.execute_read_query(query,(id))\n    def insert(self, Employee):",
        "detail": "dao.daoConnection",
        "documentation": {}
    },
    {
        "label": "insertarciudad",
        "kind": 2,
        "importPath": "main.main",
        "description": "main.main",
        "peekOfCode": "def insertarciudad():\n    name = input(\"Ingrese el Nombre de la Ciudad\")\n    ciudad = c.City(name,1)\n    daoCity = daoConnection.DaoCity(conex)\n    #insertar \n    daoCity.insert(ciudad)\ndef MostrarCiudad():\n    daoCity = daoConnection.DaoCity(conex)\n    cities = daoCity.get_all()\n    for City in cities :",
        "detail": "main.main",
        "documentation": {}
    },
    {
        "label": "MostrarCiudad",
        "kind": 2,
        "importPath": "main.main",
        "description": "main.main",
        "peekOfCode": "def MostrarCiudad():\n    daoCity = daoConnection.DaoCity(conex)\n    cities = daoCity.get_all()\n    for City in cities :\n        print(City)\ndef EliminarCiudad():\n    NameEliminar = input(\"Elija el ID de la Ciudad que deseas Eliminar\")\n    daoCity = daoConnection.DaoCity(conex)\n    daoCity.delete(NameEliminar)\ndef buscarCiudad():",
        "detail": "main.main",
        "documentation": {}
    },
    {
        "label": "EliminarCiudad",
        "kind": 2,
        "importPath": "main.main",
        "description": "main.main",
        "peekOfCode": "def EliminarCiudad():\n    NameEliminar = input(\"Elija el ID de la Ciudad que deseas Eliminar\")\n    daoCity = daoConnection.DaoCity(conex)\n    daoCity.delete(NameEliminar)\ndef buscarCiudad():\n    idBuscarCiudad = input(\"Elije el ID de la ciudad que deseas buscar \")\n    daoCity = daoConnection.DaoCity(conex)\n    cities = daoCity.get_by_id(idBuscarCiudad)\n    print(cities)\ndef menu():",
        "detail": "main.main",
        "documentation": {}
    },
    {
        "label": "buscarCiudad",
        "kind": 2,
        "importPath": "main.main",
        "description": "main.main",
        "peekOfCode": "def buscarCiudad():\n    idBuscarCiudad = input(\"Elije el ID de la ciudad que deseas buscar \")\n    daoCity = daoConnection.DaoCity(conex)\n    cities = daoCity.get_by_id(idBuscarCiudad)\n    print(cities)\ndef menu():\n    print(\"1. Ingresa la Ciudad\")\n    print(\"2. Mostrar Ciudad\")\n    print(\"3. Eliminar Ciudad\")\n    print(\"4. Editar Ciudad\")",
        "detail": "main.main",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "main.main",
        "description": "main.main",
        "peekOfCode": "def menu():\n    print(\"1. Ingresa la Ciudad\")\n    print(\"2. Mostrar Ciudad\")\n    print(\"3. Eliminar Ciudad\")\n    print(\"4. Editar Ciudad\")\n    print(\"5. Buscar Ciudad\")\n    print(\"6. Salir\")\ndef main():\n    opcion = 0\n    while(opcion != 6):",
        "detail": "main.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main.main",
        "description": "main.main",
        "peekOfCode": "def main():\n    opcion = 0\n    while(opcion != 6):\n        menu()\n        opcion = int(input(\"Ingrese tu Opcion\"))\n        if(opcion == 1):\n            insertarciudad()\n            os.system(\"pause\")\n        elif(opcion == 2):\n            MostrarCiudad()",
        "detail": "main.main",
        "documentation": {}
    },
    {
        "label": "conex",
        "kind": 5,
        "importPath": "main.main",
        "description": "main.main",
        "peekOfCode": "conex = daoConnection.Connection(\"localhost\", \"root\", \"\", \"dbregisters\")\nconex.connect()\ndef insertarciudad():\n    name = input(\"Ingrese el Nombre de la Ciudad\")\n    ciudad = c.City(name,1)\n    daoCity = daoConnection.DaoCity(conex)\n    #insertar \n    daoCity.insert(ciudad)\ndef MostrarCiudad():\n    daoCity = daoConnection.DaoCity(conex)",
        "detail": "main.main",
        "documentation": {}
    },
    {
        "label": "City",
        "kind": 6,
        "importPath": "models.clases",
        "description": "models.clases",
        "peekOfCode": "class City:\n    def __init__(self, name, status, id):\n        self.name = name\n        self.status = status\n        self.id = id\n    def __str__(self):\n        return self.name\nclass Job:\n    def __init__(self, name, status):\n        self.name = name",
        "detail": "models.clases",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "models.clases",
        "description": "models.clases",
        "peekOfCode": "class Job:\n    def __init__(self, name, status):\n        self.name = name\n        self.status = status\n    def __str__(self):\n        return self.name\nclass Employee:\n    def __init__(self, nombre, ciudad_id, jobs_id, salary, status):\n        self.nombre = nombre\n        self.ciudad_id = ciudad_id ",
        "detail": "models.clases",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "models.clases",
        "description": "models.clases",
        "peekOfCode": "class Employee:\n    def __init__(self, nombre, ciudad_id, jobs_id, salary, status):\n        self.nombre = nombre\n        self.ciudad_id = ciudad_id \n        self.jobs_id = jobs_id\n        self.salary = salary\n        self.status = status\n    def __str__(self):\n        return self.name\n    def get_full_name(self):",
        "detail": "models.clases",
        "documentation": {}
    }
]